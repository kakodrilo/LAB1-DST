// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClienteServiceClient is the client API for ClienteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClienteServiceClient interface {
	IngresarOrden(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Seguimiento, error)
	ConsultarEstado(ctx context.Context, in *Seguimiento, opts ...grpc.CallOption) (*Estado, error)
}

type clienteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClienteServiceClient(cc grpc.ClientConnInterface) ClienteServiceClient {
	return &clienteServiceClient{cc}
}

func (c *clienteServiceClient) IngresarOrden(ctx context.Context, in *Orden, opts ...grpc.CallOption) (*Seguimiento, error) {
	out := new(Seguimiento)
	err := c.cc.Invoke(ctx, "/pb.ClienteService/IngresarOrden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clienteServiceClient) ConsultarEstado(ctx context.Context, in *Seguimiento, opts ...grpc.CallOption) (*Estado, error) {
	out := new(Estado)
	err := c.cc.Invoke(ctx, "/pb.ClienteService/ConsultarEstado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClienteServiceServer is the server API for ClienteService service.
// All implementations must embed UnimplementedClienteServiceServer
// for forward compatibility
type ClienteServiceServer interface {
	IngresarOrden(context.Context, *Orden) (*Seguimiento, error)
	ConsultarEstado(context.Context, *Seguimiento) (*Estado, error)
	mustEmbedUnimplementedClienteServiceServer()
}

// UnimplementedClienteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClienteServiceServer struct {
}

func (UnimplementedClienteServiceServer) IngresarOrden(context.Context, *Orden) (*Seguimiento, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngresarOrden not implemented")
}
func (UnimplementedClienteServiceServer) ConsultarEstado(context.Context, *Seguimiento) (*Estado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarEstado not implemented")
}
func (UnimplementedClienteServiceServer) mustEmbedUnimplementedClienteServiceServer() {}

// UnsafeClienteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClienteServiceServer will
// result in compilation errors.
type UnsafeClienteServiceServer interface {
	mustEmbedUnimplementedClienteServiceServer()
}

func RegisterClienteServiceServer(s *grpc.Server, srv ClienteServiceServer) {
	s.RegisterService(&_ClienteService_serviceDesc, srv)
}

func _ClienteService_IngresarOrden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Orden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).IngresarOrden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClienteService/IngresarOrden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).IngresarOrden(ctx, req.(*Orden))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClienteService_ConsultarEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seguimiento)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClienteServiceServer).ConsultarEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClienteService/ConsultarEstado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClienteServiceServer).ConsultarEstado(ctx, req.(*Seguimiento))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClienteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClienteService",
	HandlerType: (*ClienteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngresarOrden",
			Handler:    _ClienteService_IngresarOrden_Handler,
		},
		{
			MethodName: "ConsultarEstado",
			Handler:    _ClienteService_ConsultarEstado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cliente_logistica.proto",
}
